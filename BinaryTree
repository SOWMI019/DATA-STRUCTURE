class Node
{
int k;
Node left;
Node right;

Node(int data){
this.k=data;
this.left=null;
this.right=null;
}
}
class BinaryTree
{
Node root;
void inorder(Node node)
{
if(node!=null)
{
inorder(node.left);
System.out.println(node.k);
inorder(node.right);
}
}
void preorder(Node node)
{
if(node!=null)
{
System.out.println(node.k);
preorder(node.left);
preorder(node.right);
}
}
void postorder(Node node)
{
if(node!=null)
{
postorder(node.left);
postorder(node.right);
System.out.println(node.k);
}
}
public static void main(String[] args)
{
BinaryTree t=new BinaryTree();
t.root=new Node(1);
t.root.left=new Node(2);
t.root.right=new Node(3);
t.root.left.left=new Node(4);
t.root.left.right=new Node(5);

System.out.println("Inorder Traversal:");
 t.inorder(t.root);
System.out.println("Preorder Traversal:");
t.preorder(t.root);

System.out.println("Postorder Traversal:");
t.postorder(t.root);
}
}
